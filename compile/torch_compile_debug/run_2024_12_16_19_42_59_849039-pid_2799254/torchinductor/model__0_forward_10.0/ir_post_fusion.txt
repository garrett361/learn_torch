buf0_buf1: FusedSchedulerNode(SchedulerNode,SchedulerNode)
buf0_buf1.writes = [MemoryDep('buf0', c0, {c0: 128}), MemoryDep('buf1', c0, {c0: 128})]
buf0_buf1.unmet_dependencies = []
buf0_buf1.met_dependencies = [MemoryDep('primals_1', c0, {c0: 128})]
buf0_buf1.users = []
    buf0_buf1.snodes[0] =
    buf0: SchedulerNode(ComputedBuffer)
    buf0.writes = [MemoryDep('buf0', c0, {c0: 128})]
    buf0.unmet_dependencies = []
    buf0.met_dependencies = [MemoryDep('primals_1', c0, {c0: 128})]
    buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf0.group.device = cuda:1
    buf0.group.iteration = (128, 1)
    buf0.sizes = ([128], [])
    class buf0_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('primals_1', get_index)
            relu = ops.relu(load)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf0', get_index_1, relu, None)
            return store
    buf0_buf1.snodes[1] =
    buf1: SchedulerNode(ComputedBuffer)
    buf1.writes = [MemoryDep('buf1', c0, {c0: 128})]
    buf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 128})]
    buf1.met_dependencies = []
    buf1.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf1.group.device = cuda:1
    buf1.group.iteration = (128, 1)
    buf1.sizes = ([128], [])
    class buf1_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf0', get_index)
            constant = ops.constant(0.0, torch.float32)
            le = ops.le(load, constant)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf1', get_index_1, le, None)
            return store


