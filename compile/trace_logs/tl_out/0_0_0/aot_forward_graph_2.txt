class GraphModule(torch.nn.Module):
    def forward(self, primals_1: "f32[128, 128]", primals_2: "f32[128, 128]", primals_3: "f32[1, 128]"):
        # File: /gpfs/users/goon/github/garrett361/learn_torch/compile/basic.py:18 in forward, code: outputs = self.lin1(self.lin0(inputs).relu())
        permute: "f32[128, 128]" = torch.ops.aten.permute.default(primals_1, [1, 0]);  primals_1 = None
        mm: "f32[1, 128]" = torch.ops.aten.mm.default(primals_3, permute);  permute = None
        relu: "f32[1, 128]" = torch.ops.aten.relu.default(mm);  mm = None
        permute_1: "f32[128, 128]" = torch.ops.aten.permute.default(primals_2, [1, 0]);  primals_2 = None
        mm_1: "f32[1, 128]" = torch.ops.aten.mm.default(relu, permute_1)
        permute_4: "f32[128, 128]" = torch.ops.aten.permute.default(permute_1, [1, 0]);  permute_1 = None
        return [mm_1, primals_3, relu, permute_4]
        