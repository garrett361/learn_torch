buf0: ExternKernelSchedulerNode(ExternKernelOut)
buf0.writes = [StarDep(name='buf0')]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='primals_1'), StarDep(name='primals_2')]
buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]
buf0.node.kernel = extern_kernels.mm


buf1_buf2: FusedSchedulerNode(SchedulerNode,SchedulerNode)
buf1_buf2.writes = [MemoryDep('buf1', c0, {c0: 256}), MemoryDep('buf2', c0, {c0: 256})]
buf1_buf2.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]
buf1_buf2.met_dependencies = []
buf1_buf2.users = []
    buf1_buf2.snodes[0] =
    buf1: SchedulerNode(ComputedBuffer)
    buf1.writes = [MemoryDep('buf1', c0, {c0: 256})]
    buf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256})]
    buf1.met_dependencies = []
    buf1.users = [NodeUser(node=SchedulerNode(name='buf2'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf1.group.device = cuda:0
    buf1.group.iteration = (256, 1)
    buf1.sizes = ([256], [])
    class buf1_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf0', get_index)
            relu = ops.relu(load)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf1', get_index_1, relu, None)
            return store
    buf1_buf2.snodes[1] =
    buf2: SchedulerNode(ComputedBuffer)
    buf2.writes = [MemoryDep('buf2', c0, {c0: 256})]
    buf2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 256})]
    buf2.met_dependencies = []
    buf2.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf2.group.device = cuda:0
    buf2.group.iteration = (256, 1)
    buf2.sizes = ([256], [])
    class buf2_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf1', get_index)
            constant = ops.constant(0.0, torch.float32)
            le = ops.le(load, constant)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf2', get_index_1, le, None)
            return store


